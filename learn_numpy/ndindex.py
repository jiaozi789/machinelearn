import numpy as np
'''
  注意：下标从0开始。
  矩阵[行]：获取第几行的数据 获取一维数组
  矩阵[行][列]：获取第几行第几列数据 获取一个数据
  矩阵[start:stop:step]:表示获取从start到stop行数据，步数为step 获取二维数组，以行为单位截取
  矩阵[行,列]:获取第几行第几列数据 获取一个数据，和矩阵[行][列]一直
  矩阵[行范围1：行范围2,列范围1：列范围2]:获取从行范围1到行范围2数据，列范围1到列范围2的交叉数据

'''
p=np.array([n for n in range(0,16)]).reshape((4,4))
print(p.dtype)
print(p.shape)
'''
[[ 0  1  2  3]
 [ 4  5  6  7]
 [ 8  9 10 11]
 [12 13 14 15]]
'''
print(p);
'''
返回第1行
[0 1 2 3]
'''
print(p[0])
'''
返回第1行到第二行 但是不包括第二行 还是个二维数组
:表示当前维度   通过将由冒号分隔的切片参数(start:stop:step)直接提供给ndarray对象
,用于分割维度
[[0 1 2 3]]
'''
print(p[0:1])
'''
表示从 第一行到第四行不包括4 每次跳 2步
[[ 0  1  2  3]
 [ 8  9 10 11]]
'''
print(p[0:3:2])
'''
返回第 1行 第2列的元素,等价于p[0][2]
2
'''
print(p[0,2])
#返回第1行的第2-3个元素 都是包含开头不包含结尾
print(p[0,1:3])
#返回所有行和所有列
print(p[:,:])
#返回第二行和第三列所有元素
print(p[1:,2:])
'''
-1表示最后一行
[12 13 14 15]
'''
print(p[-1])
''' 
表示最后一行和最后一列
15
'''
print(p[-1,-1])
''' 找出所有大于5的，转换成1维数据
[ 6  7  8  9 10 11 12 13 14 15]
'''
print(p[p>5])
#找出所有偶数，转换成1维数据
print(p[p%2==0])
#查找所有的数组 取反
a=np.array([1,2,np.nan,np.nan])
#[ 1.  2. nan nan]
print(a)
#[ True  True False False]
print(~np.isnan(a))
#[1. 2.]
print(a[~np.isnan(a)])

